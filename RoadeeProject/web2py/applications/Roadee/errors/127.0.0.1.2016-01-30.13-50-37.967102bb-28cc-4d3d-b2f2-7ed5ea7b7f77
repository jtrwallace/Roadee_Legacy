(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object has no attribute '__getitem__'"
p3
sS'layer'
p4
S'C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\applications\\Roadee\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nimport json\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\ndef roadtrip():\n    return dict(message=T(\'Welcome to web2py!\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef user_login():\n    return dict()\n\ndef user_sign_up():\n    return dict()\n\ndef add_review():\n    db.review.update_or_insert((db.review.uuid == request.vars.data["reviewID"]),\n            waypointID = request.vars.data["waypointID"],\n            userID = request.vars.data["userID"],\n            rating = request.vars.data["rating"],\n            reviewDescription = request.vars.data["reviewDescription"]\n            )\n\n    waypoint = db(db.waypoint.uuid == request.vars.data["waypointID"]).select().first()\n    newRating = (waypoint.rating + request.vars.data["rating"]) / 2\n    newReviewList = waypoint.reviewList\n    newReviewList.append(request.vars.data["reviewID"])\n    newAverageCost = (waypoint.averageCost + request.vars.data["cost"]) / 2\n\n    db.waypoint.update((db.waypoint.uuid == request.vars.data["waypointID"]),\n            rating = newRating,\n            reviewList = newReviewList,\n            averageCost = newAverageCost\n            )\n\n    return\n\ndef add_waypoint():\n    db.waypoint.update_or_insert((db.waypoint.uuid == request.vars.data["waypointID"]),\n            rating = request.vars.data["rating"],\n            locationLatitude = request.vars.data["locationLatitude"],\n            locationLongitude = request.vars.data["locationLongitude"],\n            description = request.vars.data["description"],\n            address = request.vars.data["address"],\n            waypointName = request.vars.data["waypointName"],\n            phoneNumber = request.vars.data["phoneNumber"],\n            averageCost = request.vars.data["averageCost"],\n            #routeTypeList = request.vars.data["routeTypeList"],\n            #timeSpentList = request.vars.data["timeSpentLis"]t\n            )\n\n    return\n\ndef add_waypoint_photo():\n    waypoint = db(db.waypoint.uuid == request.vars.data["waypointID"]).select().first()\n    newPhotosURLList = waypoint.photosURLList\n    newPhotosURLList.append(request.vars.data["photoURL"])\n\n    db.waypoint.update_or_insert((db.waypoint.uuid == request.vars.data["waypointID"]),\n            photosURLList = newPhotosURLList\n            )\n\n\n    return 0;\n\ndef get_reviews_by_waypoint():\n    reviews = db(db.review.waypointID == request.vars.data["waypointID"]).select()\n    return response.json(list(reviews))\n\ndef get_routes_by_user():\n    print (request.vars["userID"])\n    routes = db(db.routes.userID == request.vars.data["userID"]).select().first()\n\n    print (routes)\n    return response.json(dict(routes))\n\ndef get_waypoints_by_route():\n    route = db(db.route.uuid == request.vars.data["routeID"]).select()\n\n    waypoints = []\n    for waypointID in route.waypointList:\n        waypoints.append(db(db.waypoint.uuid == waypointID).select().first())\n\n    return response.json(list(waypoints))\n\ndef get_waypoints_by_name():\n    search_input = request.vars.data["waypointName"].lower()\n    waypoints = db().select(db.waypoint.ALL)\n\n    matched_waypoints = []\n    for waypoint in waypoints:\n        first_chars = waypoint["waypointName"][:len(search_input)].lower()\n        if search_input == first_chars:\n            matched_waypoints.append(waypoint)\n\n    return response.json(list(matched_waypoints))\n\ndef get_waypoints_by_area():\n    minlo = request.vars.data["minLongitude"]\n    maxlo = request.vars.data["maxLongitude"]\n    minla = request.vars.data["minLatitude"]\n    maxla = request.vars.data["maxLatitude"]\n\n    containsLocation = lambda lo, la : minlo <= lo and lo <= maxlo and minla <= la and la <= maxla\n\n    waypoints = db().select(db.waypoint.ALL)\n\n    matched_waypoints = []\n    for waypoint in waypoints:\n        if containsLocation(waypoint.locationLongitude, waypoint.locationLatitude):\n            matched_waypoints.append(waypoint)\n\n    return response.json(list(matched_waypoints))\n\ndef update_route():\n    return 0;\n\ndef update_waypoint():\n    return 0;\n\nresponse._vars=response._caller(get_routes_by_user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\applications\\Roadee\\controllers/default.py", line 175, in <module>\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\applications\\Roadee\\controllers/default.py", line 126, in get_routes_by_user\n    routes = db(db.routes.userID == request.vars.data["userID"]).select().first()\nTypeError: \'NoneType\' object has no attribute \'__getitem__\'\n'
p11
s.