(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object has no attribute '__getitem__'"
p3
sS'layer'
p4
S'C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\applications\\Roadee\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nimport json\n\ndef index():\n    db.auth_user.profile.writable = False\n    db.auth_user.description.writable = False\n    db.auth_user.locationLatitude.writable = False\n    db.auth_user.locationLongitude.writable = False\n    db.auth_user.uuid.writable = False\n    return dict(registerForm=auth.register(), loginForm=auth.login())\n\ndef roadtrip():\n    return dict(message=T(\'Welcome to web2py!\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef add_review_to_waypoint():\n    db.review.update_or_insert((db.review.uuid == request.vars.unique_id),\n            waypointID = request.vars.data["waypointID"],\n            userID = request.vars.data["userID"],\n            rating = request.vars.data["rating"],\n            placeCost = request.vars.data["cost"],\n            reviewDescription = request.vars.data["reviewDescription"]\n            )\n\n    waypoint = db(db.waypoint.uuid == request.vars.unique_id).select().first()\n    newRating = (waypoint.rating + request.vars.data["rating"]) / 2\n    newReviewList = waypoint.reviewList\n    newReviewList.append(request.vars.unique_id)\n    newAverageCost = (waypoint.averageCost + request.vars.data["cost"]) / 2\n\n    db.waypoint.update((db.waypoint.uuid == request.vars.data["waypointID"]),\n            rating = newRating,\n            reviewList = newReviewList,\n            averageCost = newAverageCost\n            )\n\ndef add_route():\n    db.route.update_or_insert((db.route.uuid == request.vars.unique_id),\n            startingPointLatitude = request.vars.data["startingPointLatitude"],\n            startingPointLongitude = request.vars.data["startingPointLongitude"],\n            endingPointLatitude = request.vars.data["endingPointLatitude"],\n            endingPointLongitude = request.vars.data["endingPointLongitude"],\n            userID = request.vars.data["userID"],\n            routeName = request.vars.data["routeName"],\n            routeType = request.vars.data["routeType"]\n            )\n\ndef add_waypoint():\n    db.waypoint.update_or_insert((db.waypoint.uuid == request.vars.unique_id),\n            rating = request.vars.data["rating"],\n            locationLatitude = request.vars.data["locationLatitude"],\n            locationLongitude = request.vars.data["locationLongitude"],\n            description = request.vars.data["description"],\n            address = request.vars.data["address"],\n            waypointName = request.vars.data["waypointName"],\n            phoneNumber = request.vars.data["phoneNumber"],\n            averageCost = request.vars.data["averageCost"],\n            #routeTypeList = request.vars.data["routeTypeList"],\n            #timeSpentList = request.vars.data["timeSpentLis"]t\n            )\n\ndef add_waypoint_to_route():\n    route = db(db.route.uuid == request.vars.unique_id).select().first()\n    waypoint = db(db.waypoint.uuid == request.vars.waypointID).select().first()\n\n    newWaypointList = route.waypointList\n    newWaypointList.append(request.vars.waypointID)\n    \n    db.route.update((db.route.uuid == request.vars.unique_id),\n            waypointList = newWaypointList,\n            totalDistance = request.vars.data["totalDistance"],\n            totalTime = request.vars.data["totalTime"]\n            )\n\ndef add_photo_to_waypoint():\n    waypoint = db(db.waypoint.uuid == request.vars.unique_id).select().first()\n    newPhotosURLList = waypoint.photosURLList\n    newPhotosURLList.append(request.vars.data["photoURL"])\n\n    db.waypoint.update_or_insert((db.waypoint.uuid == request.vars.unique_id),\n            photosURLList = newPhotosURLList\n            )\n\ndef get_reviews_by_waypoint():\n    reviews = db(db.review.waypointID == request.vars.unique_id).select()\n    return response.json(reviews)\n\ndef get_routes_by_user():\n    routes = db(db.route.userID == request.vars.unique_id).select().first()\n    return response.json(routes)\n\ndef get_waypoints_by_route():\n    route = db(db.route.uuid == request.vars.unique_id).select()\n\n    waypoints = []\n    for waypointID in route.waypointList:\n        waypoints.append(db(db.waypoint.uuid == waypointID).select().first())\n\n    return response.json(waypoints)\n\ndef get_waypoints_by_name():\n    search_input = request.vars.unique_id.lower()\n    waypoints = db().select(db.waypoint.ALL)\n\n    matched_waypoints = []\n    for waypoint in waypoints:\n        first_chars = waypoint["waypointName"][:len(search_input)].lower()\n        if search_input == first_chars:\n            matched_waypoints.append(waypoint)\n\n    return response.json(matched_waypoints)\n\ndef get_waypoints_by_area():\n    minlo = request.vars.data["west"]\n    maxlo = request.vars.data["east"]\n    minla = request.vars.data["south"]\n    maxla = request.vars.data["north"]\n\n    containsLocation = lambda lo, la : minlo <= lo and lo <= maxlo and minla <= la and la <= maxla\n\n    waypoints = db().select(db.waypoint.ALL)\n\n    matched_waypoints = []\n    for waypoint in waypoints:\n        if containsLocation(waypoint.locationLongitude, waypoint.locationLatitude):\n            matched_waypoints.append(waypoint)\n\n    return response.json(matched_waypoints)\n\ndef remove_waypoint_from_route():\n    route = db(db.route.uuid == request.vars.unique_id).select().first()\n    newWaypointList = filter(lambda waypointID : waypointID == request.vars.unique_id, route.waypointList)\n\n    db.route.update_or_insert((db.route.uuid == request.vars.unique_id),\n            waypointList = newWaypointList\n            )\n\ndef remove_route():\n    db(db.route.uuid == request.vars.unique_id).select().first().delete()\n\ndef remove_review_from_waypoint():\n    review = db(db.review.uuid == request.vars.unique_id).select().first()\n    waypoint = db(db.waypoint.uuid == review.waypointID).select().first()\n    newRating = (waypoint.rating * len(waypoint.reviewList) - review.rating) / (len(waypoint.reviewList) - 1)\n    newAverageCost = (waypoint.averageCost * len(waypoint.reviewList) - review.placeCost) / (len(waypoint.reviewList) - 1)\n    newReviewList = filter(lambda reviewID : reviewID == request.vars.unique_id, waypoint.reviewList)\n\n    db.waypoint.update_or_insert((db.waypoint.uuid == review.waypointID),\n            rating = newRating,\n            averageCost = newAverageCost,\n            reviewList = newReviewList\n            )\n\n    review.delete()\n\ndef update_route():\n    return 0\n\ndef update_waypoint():\n    return 0\n\ndef test():\n    return dict(form=auth.login())\n\nresponse._vars=response._caller(add_route)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\applications\\Roadee\\controllers/default.py", line 210, in <module>\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Ryan\\Desktop\\HACK_UCSC\\RoadeeProject\\web2py\\applications\\Roadee\\controllers/default.py", line 84, in add_route\n    startingPointLatitude = request.vars.data["startingPointLatitude"],\nTypeError: \'NoneType\' object has no attribute \'__getitem__\'\n'
p11
s.